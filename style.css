/* Para escoger un elemento puede simplemente escribir su nombre (h1, h6, p, etc) o bien... */

#titulo {
    color: blueviolet;
}
/* Con el numeral se le dice a VSC que debe de buscar a un elemento con la propiedad de ID */

p.texto {
    color: blue;
}
/* Con el punto se le dice a VSC que esta buscando una clase, con la P al inicio se le pide que solo sean las clases que entren en esa categoria */

p.especial {
    color: mediumseagreen
}

/* La ultima instruccion es la que prevalece y tendra prioridad con lo que se haya escrito antes, por lo que depende el orden en que se escriba el CSS */

div p {
    color: tomato
}
/* en todas las etiquetas de div que tengan hijos de etiquetas p (pueden ser directos o n nietos) tendran el siguiente estilo */

div h2, div h3 {
    color: brown
}
/* para darle el mismo estilo se debe de poner una coma y escribir la misma estructura (en este caso se quieren las mismas h3 dentro del Div, por lo tanto se vuelve a poner div h3 */

* {
    font-size: 24px;
    /* color: black; // hay que recordar quitar esto si se quiere hacer algo nuevo*/
}
/* El asterisco es un selector universal que aplicara a todo el documento siempre y cuando estas no hayan sido definidas previamente*/

/* Aqui enseña comentarios ... pero yo lo habia aprendido antes lol */

/* .color {
    color: #ff0000;
} */
/* para poner un color se puede dar Ctrl+Space mientras estas en el atributo, se pueden dar por ese nombre, RGB, hexagesimal y valores HTSL // en hexagesimal 0 es la ausencia de color y F es el grado mas alto, pueden ser de 3 y 6 digitos // el primer digito representa el rojo, el segundo el verde y el tercero el azul // en 6 digitos, los primeros 2 son rojos, lo sigiuentes 2 son verdes y el tercero es azul. El de la izquiera es el de mayor valor y el segundo define su intensidad*/

/* .color {
    color: rgb(0, 255, 255);
} */
/* De igual manera el primero numero es rojo, siguiente verde y tercero azul */

/* Si se ven muchas instrucciones en comentario, es porque se busca trabajar con el minimo de instrucciones cruzadas posibles  */


.color {
    /* border: 5px red outset; */
    /* dotted
        dashed
        solid
        double
        groove
        ridge
        inset
        outset
        none
        hidden
        Estos son a manera tridimensional y dependeran del color del borde
    */
    border-style: solid;
    border-color: blue;
    border-radius: 5px;
    border-width: 5px;
    /* los pixeles son unidades de medidas para asignar dimensiones a los elementos utilizando css // los cm o mm no son confiables y no se ven igual en los dispositivos // La medida de EM es relativa al tamaño de las letras a la que se aplica // La medida REM es relativa al tamaño de la fuente de todo el HTML*/
}

/* Con el Ctrl+Space se ven todas las posibilidades de nuestro atributo // Se puede cambiar csss en nuestro explorador en Element>Styles // */

#fondo {
    background-color: rgba(0,0, 0, .7);
    /* opacity: 0.3; */
    /* la a es un simbolo para la opacidad o transparencia que tendra el color que aplicamos con RGB. Siendo 1 completamente solido y 0 completamente transparente  // opacity le da la opacidad a todo el elemento con el mismo criterio que a*/
    height: 200px;
    /* background-image: url('cuaderno.jpg'); */
    
    /* Ni contain ni auto se redimensionan si se cambia el tamaño de la pantalla, al contrario de cover // en dimensiones el primer valor sera el ancho y el alto es el segundo */
    /* background-repeat: repeat-y; */
    /* En caso de que haya espacio la imagen se podria repetir, con este comando podemos evitar que lo haga o hacerlo de manera vertical u horizontal */
    /* background-position: center top;
    Con esa propiedad estamos diciendole donde debe empezar a repetirse, la primera posicion es de lados y la segunda es arriba o abajo */

    background: #f00 url('cuaderno.jpg') repeat-y center bottom / 100px 100px;
    /* Si nosotros utilizamos una propiedad de background y definimos background size antes, esta no la va a tomar en cuenta / si queremos utilizarla, debems moverla despues de la propiedad de background // oooo ponerle el 100px despues de una diagonal*/
    /* background-size: 100px 100px; */
}

.margen {
    background-color: chocolate;
    margin: 15px;
    /* El primer numero es el margen de arriba, 2-margin derecha, 3- margin de abajo, 4margin left  // si se le deja un solo numero entonces lo tomara para todos los margenes// margin es afuera del elemento y padding es adentro del elemento*/
    padding: 30px 15px 5px;
    /* Si se dejan dos valores, entonces se tomara como horizontal y vertical // Al agregar un tercer valor se cambia al 1-superior 2-horizontal 3inferior*/
    border: solid 1px black;
    height: 100px;
    width: 50px;
    /* Al hacer el cuadro de texto chiquito este intentara ajustarse al contenido pero, algunas letras aun pueden salirse del cuadro (no las va a cortar)*/
    overflow: scroll;
    outline: 1px solid red;
    /* Es una propiedad que se pone fuera del borde antes del margen y recibe las mismas propiedades que el borde */
}


/* Boxmodel es como sw posiciona cada elemento en CSS (esta en computed en la parte de elements al darle inv a una página) todo tiene un margen, un borde, padding y el contenido // cuando hacemos widht, solamente se aplicara el ancho al contenido, si quisiesemos contar el valor total del ancho de nuestro elemento HTML, hay que contar wl contenido, el padding, el borde y el margen //} */


.text {
    font-family: 'Shantell Sans', cursive;
    /* Si no puede cargar la primera fuente, entonces ira hacia el siguiente */
    text-align: justify;
    text-decoration: overline;
    text-shadow: 3px 5px 5px blue;
    /* El primer valor es cuanto se va a mover hacia la derecha y el segundo es la sombra ahcia abajo. El tecrero es la cantidad de blurr que se le puede poner al texto*/
}

a:link {
    color:blueviolet
}/* Link es cuando no ha sido visitadi */

a:visited {
    color: gray;
}

a:hover{
    color: yellow;
} /* Es cuando esta pasando el mouse por encima */

a:active{
    color: red;/* cuando estoy pinchando el link */
}
/* El orden de estos css son muy importantes, no se debe de mover */

ul {
    background-color: cyan;
    list-style-type: lower-alpha;
    /* padding: 0px; */
    /* list-style-position: inside; */
}

table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    border: solid 1px #eee;
    padding: 5px;
}

th {
    background-color: tomato;
    color: white;
    text-align: left;
}


tr:nth-child(even){
    background-color: #eee;
}
/* El :nth-child nos deja seleccionar solo algunos elementos dentro de nuestro objeto // recordemos el orden, si esta despues de hover, no se va a mostrar el cambio de color al pasar el mouse*/

tr:hover{
    background-color: #aaa;
    cursor: pointer;
}

span{
    display: block;
    /* display: none; */
    /* visibility: hidden; */
    max-width: 300px;
    background-color: #f00;
}

.inline {
    display: inline;
}

/* En inline los elementos que agreguemos no estaran en una nueva linea a diferencia del block // etiquetas de html con defecto en inline son span, los ancortar? (los links) y la etiqueta de img // widht va a asignar siempre el ancho, maxwidht va a ponre el ancho maximo, si es menos, sera menos ancho*/

#position {
    position: sticky;
    left: 20px;
    top: 25px; 
    /* // esto nos deja encimar los elementos */
    /* fixed: Posicion con respecto a lo que estamos viendo en el explorador y se mueve // absolut - se va a posicionar relativo con el elemento padre mas cercano que tenga // sticky es una mezcla de los dos, se quedara fijado pero necesita top para saber a donde, de lo contraroi se quedara estatico*/
}